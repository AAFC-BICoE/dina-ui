# Additional launch configuration for local dev instances.
version: "3.7"
networks:
  default:
    ipam:
      config:
        - subnet: ${SUBNET}
services:
  api:
    image: maven:3.6.3-jdk-8
    # Run as Docker host user so generated files don't belong to root:
    user: $UID:$GID
    volumes:
      - "../repos/objectstore-api:/app"
      # Share host users:
      - "/etc/group:/etc/group:ro"
      - "/etc/passwd:/etc/passwd:ro"
      - "/etc/shadow:/etc/shadow:ro"
      # Use the host maven repository:
      - "~/.m2:/var/maven/.m2"
    ports:
      - "5005:5005" # debug port
    extra_hosts:
      # Resolve the Keycloak domain to Keycloak's static IP:
      - "${KEYCLOAK_DOMAIN}:${KEYCLOAK_IP}"
    # The maven container ignores the docker-compose "environment" field, so pass in variables in the command:
    command: >
      bash -c "
      mvn
      -f /app/pom.xml
      -Duser.home=/var/maven
      -Dspring-boot-maven-plugin.fork=true
      -Dspring-boot.run.jvmArguments=\"
        -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005
        -Dspring.datasource.url=jdbc:postgresql://database/objectstore?currentSchema=object_store
        -Dspring.datasource.username=postgres
        -Dspring.datasource.password=p
        -Dspring.datasource.continue-on-error=true
        -Dspring.liquibase.user=postgres
        -Dspring.liquibase.password=p
        -Dspring.servlet.multipart.max-file-size=2GB
        -Dspring.servlet.multipart.max-request-size=2GB
        -Dminio.host=minio
        -Dminio.port=9000
        -Dminio.accessKey=minio
        -Dminio.secretKey=minio123
        -Dkeycloak.enabled=true
        -Dkeycloak.auth-server-url=http://${KEYCLOAK_DOMAIN}/auth
      \"
      spring-boot:run
      "
  # Dev app that hot-reloads the UI source code:
  ui-dev-server:
    image: node:12.16.1
    volumes:
      - "../repos/dina-ui:/dina-ui"
      # Share host home directory for yarn cache:
      - /home/${USER}:/home/${USER}
      # Share host users:
      - /etc/group:/etc/group:ro
      - /etc/passwd:/etc/passwd:ro
      - /etc/shadow:/etc/shadow:ro
    # Run as Docker host user so generated files don't belong to root:
    user: $UID:$GID
    stop_signal: SIGKILL
    command: >
      bash -c "
      yarn --cwd=/dina-ui/packages/objectstore-ui ;
      yarn --cwd=/dina-ui/packages/objectstore-ui next
      "
  # Front-end gateway that proxies URLs to the correct service:
  ui:
    image: caddy/caddy:2.0.0-rc.3
    volumes:
      - "./ui.dev.Caddyfile:/etc/caddy/Caddyfile"
    environment:
      UI_DEV_SERVER_ADDRESS: ui-dev-server:3000
      OBJECTSTORE_API_ADDRESS: api:8080
      KEYCLOAK_CLIENTID: objectstore
      KEYCLOAK_REALM: dina
      KEYCLOAK_PUBLIC_URL: http://${KEYCLOAK_DOMAIN}/auth
    labels:
      - "traefik.http.routers.ui.rule=Host(`${OBJECTSTOREUI_DOMAIN}`)"
  # Reverse proxy exposing Keycloak with a fixed IP on port 80.
  # Running the Keycloak container directly on port 80 gives a permissions error,
  # because it doesn't run as root.
  keycloak-gateway:
    image: caddy/caddy:2.0.0-rc.3
    labels:
      - "traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_DOMAIN}`)"
    command: caddy reverse-proxy --from :80 --to keycloak:8080
    networks:
      default:
        # Here we set the IP for Keycloak
        ipv4_address: ${KEYCLOAK_IP}