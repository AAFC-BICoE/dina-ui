# Configures Caddy (reverse proxy) to serve the app as static files and proxy
# API urls to the API service.
http://:80

# Serve the production app as static HTML files:
root * /www/html
file_server
# Routes to static HTML files e.g. { URL /list } -> { File /list.html }
try_files {path}.html {path}

# Provide the Keycloak config to the front-end code:
respond /keycloak.json "{ \"resource\": \"{$KEYCLOAK_CLIENTID}\", \"realm\": \"{$KEYCLOAK_REALM}\", \"auth-server-url\": \"{$KEYCLOAK_PUBLIC_URL}\" }"

# Proxy to the additional Agent API:
reverse_proxy /api/v1/agent {$AGENT_API_ADDRESS}
reverse_proxy /api/v1/agent* {$AGENT_API_ADDRESS}
reverse_proxy /api/v1/agent/* {$AGENT_API_ADDRESS}

#@objectstore path_regexp \/api\/v1\/(?!agent)

#reverse_proxy  @objectstore {$OBJECTSTORE_API_ADDRESS}

reverse_proxy  /api/v1/managed-attribute {$OBJECTSTORE_API_ADDRESS}
reverse_proxy  /api/v1/managed-attribute/*  {$OBJECTSTORE_API_ADDRESS}
reverse_proxy  /api/v1/managed-attribute*  {$OBJECTSTORE_API_ADDRESS}
reverse_proxy  /api/v1/metadata  {$OBJECTSTORE_API_ADDRESS}
reverse_proxy /api/v1/metadata/* {$OBJECTSTORE_API_ADDRESS}
reverse_proxy /api/v1/metadata* {$OBJECTSTORE_API_ADDRESS}
reverse_proxy  /api/v1/object-subtype   {$OBJECTSTORE_API_ADDRESS}
reverse_proxy  /api/v1/object-subtype*   {$OBJECTSTORE_API_ADDRESS}
reverse_proxy /api/v1/object-subtype/*  {$OBJECTSTORE_API_ADDRESS}
reverse_proxy /api/v1/operations {$OBJECTSTORE_API_ADDRESS}
reverse_proxy /api/v1/file     {$OBJECTSTORE_API_ADDRESS}
reverse_proxy /api/v1/file*     {$OBJECTSTORE_API_ADDRESS}
reverse_proxy /api/v1/file/*   {$OBJECTSTORE_API_ADDRESS}
