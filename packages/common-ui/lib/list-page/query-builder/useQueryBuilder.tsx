import { useCallback, useState } from "react";
import {
  Builder,
  BuilderProps,
  Config,
  ImmutableTree,
  Query,
  Utils
} from "react-awesome-query-builder";
import { LoadingSpinner } from "../..";
import { useIndexMapping } from "../useIndexMapping";
import { useQueryBuilderConfig } from "./useQueryBuilderConfig";

export interface UseQueryBuilderProps {
  indexName: string;

  viewMode: boolean;
}

export function useQueryBuilder({ indexName, viewMode }: UseQueryBuilderProps) {
  // Load index map using the index name.
  const { indexMap } = useIndexMapping(indexName);

  // Load the query build configuration.
  const { queryBuilderConfig } = useQueryBuilderConfig(
    indexMap,
    indexName,
    viewMode
  );

  // State to store the query tree generated by the Query Builder. This tree is used to store the
  // current values, not the submitted tree.
  const [queryBuilderTree, setQueryBuilderTree] = useState<ImmutableTree>(
    defaultQueryTree()
  );

  function getCurrentQueryTree() {
    return queryBuilderTree;
  }

  function loadQueryTree(newTree: ImmutableTree) {
    setQueryBuilderTree(newTree);
  }

  return {
    QueryBuilder: (
      <QueryBuilder
        queryBuilderConfig={queryBuilderConfig}
        queryBuilderTree={queryBuilderTree}
        setQueryBuilderTree={(newTree) => setQueryBuilderTree(newTree)}
      />
    ),
    getCurrentQueryTree,
    loadQueryTree,
    queryBuilderConfig
  };
}

interface QueryBuilderProps {
  /**
   * Loaded from the Query Page since it's required for elastic search generation.
   */
  queryBuilderConfig?: Config;

  queryBuilderTree: ImmutableTree;

  setQueryBuilderTree: (newTree: ImmutableTree) => void;
}

function QueryBuilder({
  queryBuilderConfig,
  queryBuilderTree,
  setQueryBuilderTree
}: QueryBuilderProps) {
  const onChange = useCallback((immutableTree: ImmutableTree) => {
    setQueryBuilderTree(immutableTree);
  }, []);

  const renderBuilder = useCallback(
    (props: BuilderProps) => (
      <div className="query-builder-container">
        <div className="query-builder qb-lite">
          <Builder {...props} />
        </div>
      </div>
    ),
    []
  );

  // Display loading spinner when performing request for the index.
  if (!queryBuilderTree || !queryBuilderConfig) {
    return <LoadingSpinner loading={true} />;
  }

  return (
    <>
      <Query
        {...queryBuilderConfig}
        value={queryBuilderTree}
        onChange={onChange}
        renderBuilder={renderBuilder}
      />
    </>
  );
}

/**
 * Empty query tree, used as the default when loading the page.
 */
export function defaultQueryTree(): ImmutableTree {
  return Utils.loadTree({
    id: Utils.uuid(),
    type: "group",
    children1: [
      {
        type: "rule",
        properties: {
          field: null,
          operator: null,
          value: [],
          valueSrc: [],
          valueError: []
        }
      }
    ]
  });
}
