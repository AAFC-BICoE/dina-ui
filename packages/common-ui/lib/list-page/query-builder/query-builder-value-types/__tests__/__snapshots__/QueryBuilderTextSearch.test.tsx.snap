// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`QueryBuilderTextSearch QueryBuilderTextSearch Component Display field if match type is equals: Expect text field not to be displayed since the match type is not equals 1`] = `
<DocumentFragment>
  <div>
    <form
      action="#"
    >
      <div
        class="error-viewer"
      />
    </form>
  </div>
</DocumentFragment>
`;

exports[`QueryBuilderTextSearch QueryBuilderTextSearch Component Display field if match type is equals: Expect text field to be displayed since match type is equals 1`] = `
<DocumentFragment>
  <div>
    <form
      action="#"
    >
      <div
        class="error-viewer"
      />
      <input
        class="form-control"
        placeholder="Enter text search value..."
        type="text"
        value="test"
      />
    </form>
  </div>
</DocumentFragment>
`;

exports[`QueryBuilderTextSearch QueryBuilderTextSearch Component Display field if match type is in or not in: Expect text field to be displayed with a different placeholder. 1`] = `
<DocumentFragment>
  <div>
    <form
      action="#"
    >
      <div
        class="error-viewer"
      />
      <input
        class="form-control"
        placeholder="Enter comma-separated values..."
        type="text"
        value="test1, test2, test3"
      />
    </form>
  </div>
</DocumentFragment>
`;

exports[`QueryBuilderTextSearch QueryBuilderTextSearch Component Display field if match type is in or not in: Expect text field to be displayed with a different placeholder. 2`] = `
<DocumentFragment>
  <div>
    <form
      action="#"
    >
      <div
        class="error-viewer"
      />
      <input
        class="form-control"
        placeholder="Enter comma-separated values..."
        type="text"
        value="test1, test2, test3"
      />
    </form>
  </div>
</DocumentFragment>
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function ContainsText (Infix) operation Normal field 1`] = `
{
  "match": {
    "data.attributes.textField.infix": {
      "query": "text search",
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function ContainsText (Infix) operation With relationship as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "match": {
              "included.attributes.name.infix": {
                "query": "text search",
              },
            },
          },
          {
            "term": {
              "included.type": "collection",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function ContainsText (Infix) operation With relationship containing complex path as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "match": {
              "included.attributes.determination.scientificName.infix": {
                "query": "text",
              },
            },
          },
          {
            "term": {
              "included.type": "organism",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Edge cases If no field value is provided, nothing should be generated. 1`] = `{}`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Empty operation Normal field 1`] = `
{
  "bool": {
    "should": [
      {
        "bool": {
          "must_not": {
            "exists": {
              "field": "data.attributes.textField",
            },
          },
        },
      },
      {
        "bool": {
          "must": {
            "term": {
              "data.attributes.textField.keyword": "",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Empty operation With relationship as field 1`] = `
{
  "bool": {
    "should": [
      {
        "bool": {
          "should": [
            {
              "bool": {
                "must_not": {
                  "nested": {
                    "path": "included",
                    "query": {
                      "bool": {
                        "must": [
                          {
                            "exists": {
                              "field": "includes.name",
                            },
                          },
                          {
                            "term": {
                              "included.type": "collection",
                            },
                          },
                        ],
                      },
                    },
                  },
                },
              },
            },
            {
              "nested": {
                "path": "included",
                "query": {
                  "bool": {
                    "must": [
                      {
                        "term": {
                          "includes.name.keyword": "",
                        },
                      },
                      {
                        "term": {
                          "included.type": "collection",
                        },
                      },
                    ],
                  },
                },
              },
            },
          ],
        },
      },
      {
        "bool": {
          "must_not": {
            "exists": {
              "field": "data.relationships.collection.data.id",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function EndsWith operation Normal field 1`] = `
{
  "prefix": {
    "data.attributes.textField.prefix_reverse": "hcraes txet",
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function EndsWith operation With relationship as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "prefix": {
              "included.attributes.name.prefix_reverse": "hcraes txet",
            },
          },
          {
            "term": {
              "included.type": "collection",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function EndsWith operation With relationship containing complex path as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "prefix": {
              "included.attributes.determination.scientificName.prefix_reverse": "txet",
            },
          },
          {
            "term": {
              "included.type": "organism",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Equals operation Normal field 1`] = `
{
  "term": {
    "data.attributes.textField": "text search",
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Equals operation Normal field 2`] = `
{
  "term": {
    "data.attributes.textField": "true",
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Equals operation With relationship as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "term": {
              "included.attributes.name.keyword": "text search",
            },
          },
          {
            "term": {
              "included.type": "collection",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Equals operation With relationship as field 2`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "term": {
              "includes.name.keyword": "false",
            },
          },
          {
            "term": {
              "included.type": "collection",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Equals operation With relationship containing complex path as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "term": {
              "included.attributes.determination.scientificName.keyword": "text search",
            },
          },
          {
            "term": {
              "included.type": "organism",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Exact Match operation Normal field 1`] = `
{
  "term": {
    "data.attributes.textField.keyword": "text search",
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Exact Match operation With relationship as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "term": {
              "includes.name.keyword": "text search",
            },
          },
          {
            "term": {
              "included.type": "collection",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Not Equals operation Normal field 1`] = `
{
  "bool": {
    "should": [
      {
        "bool": {
          "must_not": {
            "term": {
              "data.attributes.textField": "text search",
            },
          },
        },
      },
      {
        "bool": {
          "must_not": {
            "exists": {
              "field": "data.attributes.textField",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Not Equals operation With relationship as field 1`] = `
{
  "bool": {
    "should": [
      {
        "nested": {
          "path": "included",
          "query": {
            "bool": {
              "must": {
                "term": {
                  "included.type": "collection",
                },
              },
              "must_not": {
                "term": {
                  "includes.name": "text search",
                },
              },
            },
          },
        },
      },
      {
        "nested": {
          "path": "included",
          "query": {
            "bool": {
              "must": {
                "term": {
                  "included.type": "collection",
                },
              },
              "must_not": {
                "exists": {
                  "field": "includes.name",
                },
              },
            },
          },
        },
      },
      {
        "bool": {
          "must_not": {
            "exists": {
              "field": "data.relationships.collection.data.id",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Not empty operation Normal field 1`] = `
{
  "bool": {
    "must": {
      "exists": {
        "field": "data.attributes.textField",
      },
    },
    "must_not": {
      "term": {
        "data.attributes.textField.keyword": "",
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function Not empty operation With relationship as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "term": {
              "included.type": "collection",
            },
          },
          {
            "exists": {
              "field": "includes.name",
            },
          },
        ],
        "must_not": {
          "term": {
            "includes.name.keyword": "",
          },
        },
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function contains (wildcard) operation Normal field 1`] = `
{
  "wildcard": {
    "data.attributes.textField": {
      "case_insensitive": true,
      "value": "*text search*",
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function contains (wildcard) operation With relationship as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "wildcard": {
              "included.attributes.name.keyword": {
                "case_insensitive": true,
                "value": "*text search*",
              },
            },
          },
          {
            "term": {
              "included.type": "collection",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function contains (wildcard) operation With relationship containing complex path as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "wildcard": {
              "included.attributes.determination.scientificName": {
                "case_insensitive": true,
                "value": "*text*",
              },
            },
          },
          {
            "term": {
              "included.type": "organism",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function in operator Normal field 1`] = `
{
  "bool": {
    "must": {
      "bool": {
        "minimum_should_match": 1,
        "should": [
          {
            "term": {
              "data.attributes.textField": {
                "case_insensitive": true,
                "value": "test1",
              },
            },
          },
          {
            "term": {
              "data.attributes.textField": {
                "case_insensitive": true,
                "value": "test2",
              },
            },
          },
          {
            "term": {
              "data.attributes.textField": {
                "case_insensitive": true,
                "value": "test3",
              },
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function not in operator Normal field 1`] = `
{
  "bool": {
    "must_not": {
      "bool": {
        "minimum_should_match": 1,
        "should": [
          {
            "term": {
              "data.attributes.textField": {
                "case_insensitive": true,
                "value": "test1",
              },
            },
          },
          {
            "term": {
              "data.attributes.textField": {
                "case_insensitive": true,
                "value": "test2",
              },
            },
          },
          {
            "term": {
              "data.attributes.textField": {
                "case_insensitive": true,
                "value": "test3",
              },
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function startsWith (prefix) operation (Non-optimized) Normal field 1`] = `
{
  "prefix": {
    "data.attributes.textField": {
      "case_insensitive": true,
      "value": "text search",
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function startsWith (prefix) operation (Non-optimized) With relationship as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "prefix": {
              "included.attributes.name": {
                "case_insensitive": true,
                "value": "text search",
              },
            },
          },
          {
            "term": {
              "included.type": "collection",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function startsWith (prefix) operation (Non-optimized) With relationship containing complex path as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "prefix": {
              "included.attributes.determination.scientificName": {
                "case_insensitive": true,
                "value": "text",
              },
            },
          },
          {
            "term": {
              "included.type": "organism",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function startsWith (prefix) operation (Optimized) Normal field 1`] = `
{
  "prefix": {
    "data.attributes.textField.prefix": {
      "case_insensitive": true,
      "value": "text search",
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function startsWith (prefix) operation (Optimized) With relationship as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "prefix": {
              "included.attributes.name.prefix": {
                "case_insensitive": true,
                "value": "text search",
              },
            },
          },
          {
            "term": {
              "included.type": "collection",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderTextSearch transformTextSearchToDSL function startsWith (prefix) operation (Optimized) With relationship containing complex path as field 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": [
          {
            "prefix": {
              "included.attributes.determination.scientificName.prefix": {
                "case_insensitive": true,
                "value": "text",
              },
            },
          },
          {
            "term": {
              "included.type": "organism",
            },
          },
        ],
      },
    },
  },
}
`;
