// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`QueryBuilderClassificationSearch QueryBuilderClassificationSearch Component Display field if match type is equals: Expect text field not to be displayed since the match type is not equals 1`] = `
<DocumentFragment>
  <div>
    <form
      action="#"
    >
      <div
        class="error-viewer"
      />
      <div
        class="row"
      >
        <div
          class="col me-1 ms-2 ps-0 css-b62m3t-container"
        >
          <span
            class="css-1f43avz-a11yText-A11yText"
            id="react-select-4-live-region"
          />
          <span
            aria-atomic="false"
            aria-live="polite"
            aria-relevant="additions text"
            class="css-1f43avz-a11yText-A11yText"
            role="log"
          />
          <div
            class="css-13cymwt-control"
          >
            <div
              class="css-hlgwow"
            >
              <div
                class="css-1jqq78o-placeholder"
                id="react-select-4-placeholder"
              >
                Select classification rank...
              </div>
              <div
                class="css-19bb58m"
                data-value=""
              >
                <input
                  aria-activedescendant=""
                  aria-autocomplete="list"
                  aria-describedby="react-select-4-placeholder"
                  aria-expanded="false"
                  aria-haspopup="true"
                  autocapitalize="none"
                  autocomplete="off"
                  autocorrect="off"
                  class=""
                  id="react-select-4-input"
                  role="combobox"
                  spellcheck="false"
                  style="opacity: 1; width: 100%; grid-area: 1 / 2; min-width: 2px; border: 0px; margin: 0px; outline: 0; padding: 0px;"
                  tabindex="0"
                  type="text"
                  value=""
                />
              </div>
            </div>
            <div
              class="css-1wy0on6"
            >
              <div
                aria-hidden="true"
                class="css-pogzpp-loadingIndicator"
              >
                <span
                  class="css-1icxkl9-LoadingDot"
                />
                <span
                  class="css-1oazjx7-LoadingDot"
                />
                <span
                  class="css-1wonz24-LoadingDot"
                />
              </div>
              <span
                class="css-1u9des2-indicatorSeparator"
              />
              <div
                aria-hidden="true"
                class="css-1xc3v61-indicatorContainer"
              >
                <svg
                  aria-hidden="true"
                  class="css-tj5bde-Svg"
                  focusable="false"
                  height="20"
                  viewBox="0 0 20 20"
                  width="20"
                >
                  <path
                    d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                  />
                </svg>
              </div>
            </div>
          </div>
        </div>
        <div
          class="col me-1 ps-0 css-b62m3t-container"
        >
          <span
            class="css-1f43avz-a11yText-A11yText"
            id="react-select-5-live-region"
          />
          <span
            aria-atomic="false"
            aria-live="polite"
            aria-relevant="additions text"
            class="css-1f43avz-a11yText-A11yText"
            role="log"
          />
          <div
            class="css-13cymwt-control"
          >
            <div
              class="css-hlgwow"
            >
              <div
                class="css-1dimb5e-singleValue"
              >
                Empty
              </div>
              <div
                class="css-19bb58m"
                data-value=""
              >
                <input
                  aria-activedescendant=""
                  aria-autocomplete="list"
                  aria-expanded="false"
                  aria-haspopup="true"
                  autocapitalize="none"
                  autocomplete="off"
                  autocorrect="off"
                  class=""
                  id="react-select-5-input"
                  role="combobox"
                  spellcheck="false"
                  style="opacity: 1; width: 100%; grid-area: 1 / 2; min-width: 2px; border: 0px; margin: 0px; outline: 0; padding: 0px;"
                  tabindex="0"
                  type="text"
                  value=""
                />
              </div>
            </div>
            <div
              class="css-1wy0on6"
            >
              <span
                class="css-1u9des2-indicatorSeparator"
              />
              <div
                aria-hidden="true"
                class="css-1xc3v61-indicatorContainer"
              >
                <svg
                  aria-hidden="true"
                  class="css-tj5bde-Svg"
                  focusable="false"
                  height="20"
                  viewBox="0 0 20 20"
                  width="20"
                >
                  <path
                    d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                  />
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>
    </form>
  </div>
</DocumentFragment>
`;

exports[`QueryBuilderClassificationSearch QueryBuilderClassificationSearch Component Display field if match type is equals: Expect text field to be displayed since match type is equals 1`] = `
<DocumentFragment>
  <div>
    <form
      action="#"
    >
      <div
        class="error-viewer"
      />
      <div
        class="row"
      >
        <div
          class="col me-1 ms-2 ps-0 css-b62m3t-container"
        >
          <span
            class="css-1f43avz-a11yText-A11yText"
            id="react-select-2-live-region"
          />
          <span
            aria-atomic="false"
            aria-live="polite"
            aria-relevant="additions text"
            class="css-1f43avz-a11yText-A11yText"
            role="log"
          />
          <div
            class="css-13cymwt-control"
          >
            <div
              class="css-hlgwow"
            >
              <div
                class="css-1jqq78o-placeholder"
                id="react-select-2-placeholder"
              >
                Select classification rank...
              </div>
              <div
                class="css-19bb58m"
                data-value=""
              >
                <input
                  aria-activedescendant=""
                  aria-autocomplete="list"
                  aria-describedby="react-select-2-placeholder"
                  aria-expanded="false"
                  aria-haspopup="true"
                  autocapitalize="none"
                  autocomplete="off"
                  autocorrect="off"
                  class=""
                  id="react-select-2-input"
                  role="combobox"
                  spellcheck="false"
                  style="opacity: 1; width: 100%; grid-area: 1 / 2; min-width: 2px; border: 0px; margin: 0px; outline: 0; padding: 0px;"
                  tabindex="0"
                  type="text"
                  value=""
                />
              </div>
            </div>
            <div
              class="css-1wy0on6"
            >
              <div
                aria-hidden="true"
                class="css-pogzpp-loadingIndicator"
              >
                <span
                  class="css-1icxkl9-LoadingDot"
                />
                <span
                  class="css-1oazjx7-LoadingDot"
                />
                <span
                  class="css-1wonz24-LoadingDot"
                />
              </div>
              <span
                class="css-1u9des2-indicatorSeparator"
              />
              <div
                aria-hidden="true"
                class="css-1xc3v61-indicatorContainer"
              >
                <svg
                  aria-hidden="true"
                  class="css-tj5bde-Svg"
                  focusable="false"
                  height="20"
                  viewBox="0 0 20 20"
                  width="20"
                >
                  <path
                    d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                  />
                </svg>
              </div>
            </div>
          </div>
        </div>
        <div
          class="col me-1 ps-0 css-b62m3t-container"
        >
          <span
            class="css-1f43avz-a11yText-A11yText"
            id="react-select-3-live-region"
          />
          <span
            aria-atomic="false"
            aria-live="polite"
            aria-relevant="additions text"
            class="css-1f43avz-a11yText-A11yText"
            role="log"
          />
          <div
            class="css-13cymwt-control"
          >
            <div
              class="css-hlgwow"
            >
              <div
                class="css-1dimb5e-singleValue"
              >
                Exact match
              </div>
              <div
                class="css-19bb58m"
                data-value=""
              >
                <input
                  aria-activedescendant=""
                  aria-autocomplete="list"
                  aria-expanded="false"
                  aria-haspopup="true"
                  autocapitalize="none"
                  autocomplete="off"
                  autocorrect="off"
                  class=""
                  id="react-select-3-input"
                  role="combobox"
                  spellcheck="false"
                  style="opacity: 1; width: 100%; grid-area: 1 / 2; min-width: 2px; border: 0px; margin: 0px; outline: 0; padding: 0px;"
                  tabindex="0"
                  type="text"
                  value=""
                />
              </div>
            </div>
            <div
              class="css-1wy0on6"
            >
              <span
                class="css-1u9des2-indicatorSeparator"
              />
              <div
                aria-hidden="true"
                class="css-1xc3v61-indicatorContainer"
              >
                <svg
                  aria-hidden="true"
                  class="css-tj5bde-Svg"
                  focusable="false"
                  height="20"
                  viewBox="0 0 20 20"
                  width="20"
                >
                  <path
                    d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                  />
                </svg>
              </div>
            </div>
          </div>
        </div>
        <input
          class="col form-control me-3"
          placeholder="Enter text search value..."
          type="text"
          value=""
        />
      </div>
    </form>
  </div>
</DocumentFragment>
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: empty 1`] = `
Object {
  "bool": Object {
    "should": Array [
      Object {
        "bool": Object {
          "must_not": Object {
            "exists": Object {
              "field": "included.attributes.targetOrganismPrimaryClassification.kingdom",
            },
          },
        },
      },
      Object {
        "bool": Object {
          "must": Object {
            "term": Object {
              "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": "",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: empty 2`] = `
Object {
  "bool": Object {
    "should": Array [
      Object {
        "bool": Object {
          "should": Array [
            Object {
              "bool": Object {
                "must_not": Object {
                  "nested": Object {
                    "path": "included",
                    "query": Object {
                      "bool": Object {
                        "must": Array [
                          Object {
                            "exists": Object {
                              "field": "included.attributes.targetOrganismPrimaryClassification.kingdom",
                            },
                          },
                          Object {
                            "term": Object {
                              "included.type": "material-sample",
                            },
                          },
                        ],
                      },
                    },
                  },
                },
              },
            },
            Object {
              "nested": Object {
                "path": "included",
                "query": Object {
                  "bool": Object {
                    "must": Array [
                      Object {
                        "term": Object {
                          "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": "",
                        },
                      },
                      Object {
                        "term": Object {
                          "included.type": "material-sample",
                        },
                      },
                    ],
                  },
                },
              },
            },
          ],
        },
      },
      Object {
        "bool": Object {
          "must_not": Object {
            "term": Object {
              "included.type": "material-sample",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: exactMatch 1`] = `
Object {
  "term": Object {
    "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": "Animalia",
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: exactMatch 2`] = `
Object {
  "nested": Object {
    "path": "included",
    "query": Object {
      "bool": Object {
        "must": Array [
          Object {
            "term": Object {
              "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": "Animalia",
            },
          },
          Object {
            "term": Object {
              "included.type": "material-sample",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: in 1`] = `
Object {
  "bool": Object {
    "must": Object {
      "bool": Object {
        "minimum_should_match": 1,
        "should": Array [
          Object {
            "term": Object {
              "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": Object {
                "case_insensitive": true,
                "value": "Animalia",
              },
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: in 2`] = `
Object {
  "nested": Object {
    "path": "included",
    "query": Object {
      "bool": Object {
        "must": Array [
          Object {
            "bool": Object {
              "must": Object {
                "bool": Object {
                  "minimum_should_match": 1,
                  "should": Array [
                    Object {
                      "term": Object {
                        "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": Object {
                          "case_insensitive": true,
                          "value": "Animalia",
                        },
                      },
                    },
                  ],
                },
              },
            },
          },
          Object {
            "term": Object {
              "included.type": "material-sample",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: notEmpty 1`] = `
Object {
  "bool": Object {
    "must": Object {
      "exists": Object {
        "field": "included.attributes.targetOrganismPrimaryClassification.kingdom",
      },
    },
    "must_not": Object {
      "term": Object {
        "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": "",
      },
    },
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: notEmpty 2`] = `
Object {
  "nested": Object {
    "path": "included",
    "query": Object {
      "bool": Object {
        "must": Array [
          Object {
            "term": Object {
              "included.type": "material-sample",
            },
          },
          Object {
            "exists": Object {
              "field": "included.attributes.targetOrganismPrimaryClassification.kingdom",
            },
          },
        ],
        "must_not": Object {
          "term": Object {
            "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": "",
          },
        },
      },
    },
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: notEquals 1`] = `
Object {
  "bool": Object {
    "should": Array [
      Object {
        "bool": Object {
          "must_not": Object {
            "term": Object {
              "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": "Animalia",
            },
          },
        },
      },
      Object {
        "bool": Object {
          "must_not": Object {
            "exists": Object {
              "field": "included.attributes.targetOrganismPrimaryClassification.kingdom",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: notEquals 2`] = `
Object {
  "bool": Object {
    "should": Array [
      Object {
        "nested": Object {
          "path": "included",
          "query": Object {
            "bool": Object {
              "must": Object {
                "term": Object {
                  "included.type": "material-sample",
                },
              },
              "must_not": Object {
                "term": Object {
                  "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": "Animalia",
                },
              },
            },
          },
        },
      },
      Object {
        "nested": Object {
          "path": "included",
          "query": Object {
            "bool": Object {
              "must": Object {
                "term": Object {
                  "included.type": "material-sample",
                },
              },
              "must_not": Object {
                "exists": Object {
                  "field": "included.attributes.targetOrganismPrimaryClassification.kingdom",
                },
              },
            },
          },
        },
      },
      Object {
        "bool": Object {
          "must_not": Object {
            "term": Object {
              "included.type": "material-sample",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: notIn 1`] = `
Object {
  "bool": Object {
    "must_not": Object {
      "bool": Object {
        "minimum_should_match": 1,
        "should": Array [
          Object {
            "term": Object {
              "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": Object {
                "case_insensitive": true,
                "value": "Animalia",
              },
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: notIn 2`] = `
Object {
  "nested": Object {
    "path": "included",
    "query": Object {
      "bool": Object {
        "must": Array [
          Object {
            "bool": Object {
              "must_not": Object {
                "bool": Object {
                  "minimum_should_match": 1,
                  "should": Array [
                    Object {
                      "term": Object {
                        "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": Object {
                          "case_insensitive": true,
                          "value": "Animalia",
                        },
                      },
                    },
                  ],
                },
              },
            },
          },
          Object {
            "term": Object {
              "included.type": "material-sample",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: startsWith 1`] = `
Object {
  "prefix": Object {
    "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": Object {
      "case_insensitive": true,
      "value": "Animalia",
    },
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: startsWith 2`] = `
Object {
  "nested": Object {
    "path": "included",
    "query": Object {
      "bool": Object {
        "must": Array [
          Object {
            "prefix": Object {
              "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": Object {
                "case_insensitive": true,
                "value": "Animalia",
              },
            },
          },
          Object {
            "term": Object {
              "included.type": "material-sample",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: wildcard 1`] = `
Object {
  "wildcard": Object {
    "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": Object {
      "case_insensitive": true,
      "value": "*Animalia*",
    },
  },
}
`;

exports[`QueryBuilderClassificationSearch transformClassificationToDSL function Operation: wildcard 2`] = `
Object {
  "nested": Object {
    "path": "included",
    "query": Object {
      "bool": Object {
        "must": Array [
          Object {
            "wildcard": Object {
              "included.attributes.targetOrganismPrimaryClassification.kingdom.keyword": Object {
                "case_insensitive": true,
                "value": "*Animalia*",
              },
            },
          },
          Object {
            "term": Object {
              "included.type": "material-sample",
            },
          },
        ],
      },
    },
  },
}
`;
