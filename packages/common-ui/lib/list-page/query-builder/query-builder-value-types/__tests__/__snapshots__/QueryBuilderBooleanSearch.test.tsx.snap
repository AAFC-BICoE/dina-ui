// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`QueryBuilderBooleanSearch QueryBuilderBooleanSearch Component Display field if match type is equals: Expect boolean field not to be displayed since the match type is not equals 1`] = `"<QueryBuilderBooleanSearch matchType=\\"empty\\" value=\\"test\\" setValue={[Function: bound fn]} />"`;

exports[`QueryBuilderBooleanSearch QueryBuilderBooleanSearch Component Display field if match type is equals: Expect boolean field to be displayed since match type is equals 1`] = `
"<QueryBuilderBooleanSearch matchType=\\"equals\\" value=\\"test\\" setValue={[Function: bound fn]}>
  <ForwardRef value={[undefined]} options={{...}} className=\\"flex-fill\\" onChange={[Function: onChange]}>
    <Select options={{...}} className=\\"flex-fill\\" inputValue=\\"\\" menuIsOpen={false} onChange={[Function (anonymous)]} onInputChange={[Function (anonymous)]} onMenuClose={[Function (anonymous)]} onMenuOpen={[Function (anonymous)]} value={{...}} aria-live=\\"polite\\" backspaceRemovesValue={true} blurInputOnSelect={true} captureMenuScroll={false} closeMenuOnSelect={true} closeMenuOnScroll={false} components={{...}} controlShouldRenderValue={true} escapeClearsValue={false} filterOption={[Function (anonymous)]} formatGroupLabel={[Function: formatGroupLabel]} getOptionLabel={[Function: getOptionLabel]} getOptionValue={[Function: getOptionValue]} isDisabled={false} isLoading={false} isMulti={false} isRtl={false} isSearchable={true} isOptionDisabled={[Function: isOptionDisabled]} loadingMessage={[Function: loadingMessage]} maxMenuHeight={300} minMenuHeight={140} menuPlacement=\\"bottom\\" menuPosition=\\"absolute\\" menuShouldBlockScroll={false} menuShouldScrollIntoView={true} noOptionsMessage={[Function: noOptionsMessage]} openMenuOnFocus={false} openMenuOnClick={true} pageSize={5} placeholder=\\"Select...\\" screenReaderStatus={[Function: screenReaderStatus]} styles={{...}} tabIndex={0} tabSelectsValue={true}>
      <SelectContainer clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={false} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} className=\\"flex-fill\\" innerProps={{...}} isDisabled={false} isFocused={false}>
        <EmotionCssPropInternal css={{...}} className=\\"flex-fill\\" id={[undefined]} onKeyDown={[Function (anonymous)]} __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"SelectContainer\\">
          <div className=\\"flex-fill css-b62m3t-container\\" id={[undefined]} onKeyDown={[Function (anonymous)]}>
            <LiveRegion clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={false} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} id=\\"react-select-2-live-region\\" ariaSelection={{...}} focusedOption={{...}} focusedValue={{...}} isFocused={false} selectValue={{...}} focusableOptions={{...}}>
              <A11yText id=\\"react-select-2-live-region\\">
                <EmotionCssPropInternal css={{...}} id=\\"react-select-2-live-region\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"span\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"A11yText\\">
                  <span id=\\"react-select-2-live-region\\" className=\\"css-1f43avz-a11yText-A11yText\\" />
                </EmotionCssPropInternal>
              </A11yText>
              <A11yText aria-live=\\"polite\\" aria-atomic=\\"false\\" aria-relevant=\\"additions text\\">
                <EmotionCssPropInternal css={{...}} aria-live=\\"polite\\" aria-atomic=\\"false\\" aria-relevant=\\"additions text\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"span\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"A11yText\\">
                  <span aria-live=\\"polite\\" aria-atomic=\\"false\\" aria-relevant=\\"additions text\\" className=\\"css-1f43avz-a11yText-A11yText\\" />
                </EmotionCssPropInternal>
              </A11yText>
            </LiveRegion>
            <Control clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={false} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} innerRef={[Function (anonymous)]} innerProps={{...}} isDisabled={false} isFocused={false} menuIsOpen={false}>
              <EmotionCssPropInternal css={{...}} className=\\"\\" onMouseDown={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Control\\">
                <div className=\\" css-1s2u09g-control\\" onMouseDown={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]}>
                  <ValueContainer clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={false} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} isDisabled={false}>
                    <EmotionCssPropInternal css={{...}} className=\\"\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"ValueContainer\\">
                      <div className=\\" css-319lph-ValueContainer\\">
                        <Placeholder clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={false} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} isDisabled={false} isFocused={false} innerProps={{...}}>
                          <EmotionCssPropInternal css={{...}} className=\\"\\" id=\\"react-select-2-placeholder\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Placeholder\\">
                            <div className=\\" css-14el2xx-placeholder\\" id=\\"react-select-2-placeholder\\">
                              Select...
                            </div>
                          </EmotionCssPropInternal>
                        </Placeholder>
                        <Input clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={false} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} autoCapitalize=\\"none\\" autoComplete=\\"off\\" autoCorrect=\\"off\\" id=\\"react-select-2-input\\" innerRef={[Function (anonymous)]} isDisabled={false} isHidden={false} onBlur={[Function (anonymous)]} onChange={[Function (anonymous)]} onFocus={[Function (anonymous)]} spellCheck=\\"false\\" tabIndex={0} form={[undefined]} type=\\"text\\" value=\\"\\" aria-autocomplete=\\"list\\" aria-expanded={false} aria-haspopup={true} aria-controls=\\"react-select-2-listbox\\" aria-owns=\\"react-select-2-listbox\\" aria-errormessage={[undefined]} aria-invalid={[undefined]} aria-label={[undefined]} aria-labelledby={[undefined]} role=\\"combobox\\" aria-describedby=\\"react-select-2-placeholder\\">
                          <EmotionCssPropInternal className=\\"\\" css={{...}} data-value=\\"\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Input\\">
                            <div className=\\" css-6j8wv5-Input\\" data-value=\\"\\">
                              <input className=\\"\\" style={{...}} disabled={false} autoCapitalize=\\"none\\" autoComplete=\\"off\\" autoCorrect=\\"off\\" id=\\"react-select-2-input\\" onBlur={[Function (anonymous)]} onChange={[Function (anonymous)]} onFocus={[Function (anonymous)]} spellCheck=\\"false\\" tabIndex={0} form={[undefined]} type=\\"text\\" value=\\"\\" aria-autocomplete=\\"list\\" aria-expanded={false} aria-haspopup={true} aria-controls=\\"react-select-2-listbox\\" aria-owns=\\"react-select-2-listbox\\" aria-errormessage={[undefined]} aria-invalid={[undefined]} aria-label={[undefined]} aria-labelledby={[undefined]} role=\\"combobox\\" aria-describedby=\\"react-select-2-placeholder\\" />
                            </div>
                          </EmotionCssPropInternal>
                        </Input>
                      </div>
                    </EmotionCssPropInternal>
                  </ValueContainer>
                  <IndicatorsContainer clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={false} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} isDisabled={false}>
                    <EmotionCssPropInternal css={{...}} className=\\"\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"IndicatorsContainer\\">
                      <div className=\\" css-1hb7zxy-IndicatorsContainer\\">
                        <IndicatorSeparator clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={false} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} isDisabled={false} isFocused={false}>
                          <EmotionCssPropInternal css={{...}} className=\\"\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"span\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"IndicatorSeparator\\">
                            <span className=\\" css-1okebmr-indicatorSeparator\\" />
                          </EmotionCssPropInternal>
                        </IndicatorSeparator>
                        <DropdownIndicator clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={false} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} innerProps={{...}} isDisabled={false} isFocused={false}>
                          <EmotionCssPropInternal css={{...}} className=\\"\\" onMouseDown={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} aria-hidden=\\"true\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"DropdownIndicator\\">
                            <div className=\\" css-tlfecz-indicatorContainer\\" onMouseDown={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} aria-hidden=\\"true\\">
                              <DownChevron>
                                <Svg size={20}>
                                  <EmotionCssPropInternal height={20} width={20} viewBox=\\"0 0 20 20\\" aria-hidden=\\"true\\" focusable=\\"false\\" css={{...}} __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"svg\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Svg\\">
                                    <svg height={20} width={20} viewBox=\\"0 0 20 20\\" aria-hidden=\\"true\\" focusable=\\"false\\" className=\\"css-tj5bde-Svg\\">
                                      <path d=\\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\\" />
                                    </svg>
                                  </EmotionCssPropInternal>
                                </Svg>
                              </DownChevron>
                            </div>
                          </EmotionCssPropInternal>
                        </DropdownIndicator>
                      </div>
                    </EmotionCssPropInternal>
                  </IndicatorsContainer>
                </div>
              </EmotionCssPropInternal>
            </Control>
          </div>
        </EmotionCssPropInternal>
      </SelectContainer>
    </Select>
  </ForwardRef>
</QueryBuilderBooleanSearch>"
`;

exports[`QueryBuilderBooleanSearch transformBooleanSearchToDSL function Edge cases If no field value is provided, nothing should be generated. 1`] = `Object {}`;

exports[`QueryBuilderBooleanSearch transformBooleanSearchToDSL function Empty operation Normal field 1`] = `
Object {
  "bool": Object {
    "must_not": Object {
      "exists": Object {
        "field": "data.attributes.booleanField",
      },
    },
  },
}
`;

exports[`QueryBuilderBooleanSearch transformBooleanSearchToDSL function Empty operation With relationship as field 1`] = `
Object {
  "bool": Object {
    "should": Array [
      Object {
        "bool": Object {
          "must_not": Object {
            "nested": Object {
              "path": "included",
              "query": Object {
                "bool": Object {
                  "must": Array [
                    Object {
                      "exists": Object {
                        "field": "includes.name",
                      },
                    },
                    Object {
                      "term": Object {
                        "included.type": "collection",
                      },
                    },
                  ],
                },
              },
            },
          },
        },
      },
      Object {
        "bool": Object {
          "must_not": Object {
            "exists": Object {
              "field": "data.relationships.collection.data.id",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderBooleanSearch transformBooleanSearchToDSL function Equals operation Normal field 1`] = `
Object {
  "term": Object {
    "data.attributes.booleanField": "true",
  },
}
`;

exports[`QueryBuilderBooleanSearch transformBooleanSearchToDSL function Equals operation With relationship as field 1`] = `
Object {
  "nested": Object {
    "path": "included",
    "query": Object {
      "bool": Object {
        "must": Array [
          Object {
            "term": Object {
              "includes.name": "false",
            },
          },
          Object {
            "term": Object {
              "included.type": "collection",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderBooleanSearch transformBooleanSearchToDSL function Not empty operation Normal field 1`] = `
Object {
  "exists": Object {
    "field": "data.attributes.booleanField",
  },
}
`;

exports[`QueryBuilderBooleanSearch transformBooleanSearchToDSL function Not empty operation With relationship as field 1`] = `
Object {
  "nested": Object {
    "path": "included",
    "query": Object {
      "bool": Object {
        "must": Array [
          Object {
            "exists": Object {
              "field": "includes.name",
            },
          },
          Object {
            "term": Object {
              "included.type": "collection",
            },
          },
        ],
      },
    },
  },
}
`;
