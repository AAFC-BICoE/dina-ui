// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Attribute level tests Using the empty operator. 1`] = `
{
  "bool": {
    "should": Array [
      {
        "bool": {
          "must_not": {
            "exists": {
              "field": "data.attributes.extensionValues.extension.field",
            },
          },
        },
      },
      {
        "bool": {
          "must": {
            "term": {
              "data.attributes.extensionValues.extension.field.keyword": "",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Attribute level tests Using the exactMatch operator. 1`] = `
{
  "term": {
    "data.attributes.extensionValues.extension.field.keyword": "test123",
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Attribute level tests Using the in operator. 1`] = `
{
  "bool": {
    "must": {
      "bool": {
        "minimum_should_match": 1,
        "should": Array [
          {
            "term": {
              "data.attributes.extensionValues.extension.field.keyword": {
                "case_insensitive": true,
                "value": "test1",
              },
            },
          },
          {
            "term": {
              "data.attributes.extensionValues.extension.field.keyword": {
                "case_insensitive": true,
                "value": "test2",
              },
            },
          },
          {
            "term": {
              "data.attributes.extensionValues.extension.field.keyword": {
                "case_insensitive": true,
                "value": "test3",
              },
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Attribute level tests Using the notEmpty operator. 1`] = `
{
  "bool": {
    "must": {
      "exists": {
        "field": "data.attributes.extensionValues.extension.field",
      },
    },
    "must_not": {
      "term": {
        "data.attributes.extensionValues.extension.field.keyword": "",
      },
    },
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Attribute level tests Using the notEquals operator. 1`] = `
{
  "bool": {
    "should": Array [
      {
        "bool": {
          "must_not": {
            "term": {
              "data.attributes.extensionValues.extension.field.keyword": "test123",
            },
          },
        },
      },
      {
        "bool": {
          "must_not": {
            "exists": {
              "field": "data.attributes.extensionValues.extension.field",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Attribute level tests Using the notIn operator. 1`] = `
{
  "bool": {
    "must_not": {
      "bool": {
        "minimum_should_match": 1,
        "should": Array [
          {
            "term": {
              "data.attributes.extensionValues.extension.field.keyword": {
                "case_insensitive": true,
                "value": "test1",
              },
            },
          },
          {
            "term": {
              "data.attributes.extensionValues.extension.field.keyword": {
                "case_insensitive": true,
                "value": "test2",
              },
            },
          },
          {
            "term": {
              "data.attributes.extensionValues.extension.field.keyword": {
                "case_insensitive": true,
                "value": "test3",
              },
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Attribute level tests Using the startsWith operator. 1`] = `
{
  "prefix": {
    "data.attributes.extensionValues.extension.field.keyword": {
      "case_insensitive": true,
      "value": "test123",
    },
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Attribute level tests Using the wildcard operator. 1`] = `
{
  "wildcard": {
    "data.attributes.extensionValues.extension.field.keyword": {
      "case_insensitive": true,
      "value": "*test123*",
    },
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Relationship level tests Using the empty operator. 1`] = `
{
  "bool": {
    "should": Array [
      {
        "bool": {
          "should": Array [
            {
              "bool": {
                "must_not": {
                  "nested": {
                    "path": "included",
                    "query": {
                      "bool": {
                        "must": Array [
                          {
                            "exists": {
                              "field": "included.attributes.extensionValues.extension.field",
                            },
                          },
                          {
                            "term": {
                              "included.type": "collecting-event",
                            },
                          },
                        ],
                      },
                    },
                  },
                },
              },
            },
            {
              "nested": {
                "path": "included",
                "query": {
                  "bool": {
                    "must": Array [
                      {
                        "term": {
                          "included.attributes.extensionValues.extension.field.keyword": "",
                        },
                      },
                      {
                        "term": {
                          "included.type": "collecting-event",
                        },
                      },
                    ],
                  },
                },
              },
            },
          ],
        },
      },
      {
        "bool": {
          "must_not": {
            "exists": {
              "field": "data.relationships.collectingEvent.data.id",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Relationship level tests Using the exactMatch operator. 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": Array [
          {
            "term": {
              "included.attributes.extensionValues.extension.field.keyword": "test123",
            },
          },
          {
            "term": {
              "included.type": "collecting-event",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Relationship level tests Using the in operator. 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": Array [
          {
            "bool": {
              "must": {
                "bool": {
                  "minimum_should_match": 1,
                  "should": Array [
                    {
                      "term": {
                        "included.attributes.extensionValues.extension.field.keyword": {
                          "case_insensitive": true,
                          "value": "test1",
                        },
                      },
                    },
                    {
                      "term": {
                        "included.attributes.extensionValues.extension.field.keyword": {
                          "case_insensitive": true,
                          "value": "test2",
                        },
                      },
                    },
                    {
                      "term": {
                        "included.attributes.extensionValues.extension.field.keyword": {
                          "case_insensitive": true,
                          "value": "test3",
                        },
                      },
                    },
                  ],
                },
              },
            },
          },
          {
            "term": {
              "included.type": "collecting-event",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Relationship level tests Using the notEmpty operator. 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": Array [
          {
            "term": {
              "included.type": "collecting-event",
            },
          },
          {
            "exists": {
              "field": "included.attributes.extensionValues.extension.field",
            },
          },
        ],
        "must_not": {
          "term": {
            "included.attributes.extensionValues.extension.field.keyword": "",
          },
        },
      },
    },
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Relationship level tests Using the notEquals operator. 1`] = `
{
  "bool": {
    "should": Array [
      {
        "nested": {
          "path": "included",
          "query": {
            "bool": {
              "must": {
                "term": {
                  "included.type": "collecting-event",
                },
              },
              "must_not": {
                "term": {
                  "included.attributes.extensionValues.extension.field.keyword": "test123",
                },
              },
            },
          },
        },
      },
      {
        "nested": {
          "path": "included",
          "query": {
            "bool": {
              "must": {
                "term": {
                  "included.type": "collecting-event",
                },
              },
              "must_not": {
                "exists": {
                  "field": "included.attributes.extensionValues.extension.field",
                },
              },
            },
          },
        },
      },
      {
        "bool": {
          "must_not": {
            "exists": {
              "field": "data.relationships.collectingEvent.data.id",
            },
          },
        },
      },
    ],
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Relationship level tests Using the notIn operator. 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": Array [
          {
            "bool": {
              "must_not": {
                "bool": {
                  "minimum_should_match": 1,
                  "should": Array [
                    {
                      "term": {
                        "included.attributes.extensionValues.extension.field.keyword": {
                          "case_insensitive": true,
                          "value": "test1",
                        },
                      },
                    },
                    {
                      "term": {
                        "included.attributes.extensionValues.extension.field.keyword": {
                          "case_insensitive": true,
                          "value": "test2",
                        },
                      },
                    },
                    {
                      "term": {
                        "included.attributes.extensionValues.extension.field.keyword": {
                          "case_insensitive": true,
                          "value": "test3",
                        },
                      },
                    },
                  ],
                },
              },
            },
          },
          {
            "term": {
              "included.type": "collecting-event",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Relationship level tests Using the startsWith operator. 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": Array [
          {
            "prefix": {
              "included.attributes.extensionValues.extension.field.keyword": {
                "case_insensitive": true,
                "value": "test123",
              },
            },
          },
          {
            "term": {
              "included.type": "collecting-event",
            },
          },
        ],
      },
    },
  },
}
`;

exports[`QueryBuilderFieldExtensionSearch transformFieldExtensionToDSL function Relationship level tests Using the wildcard operator. 1`] = `
{
  "nested": {
    "path": "included",
    "query": {
      "bool": {
        "must": Array [
          {
            "wildcard": {
              "included.attributes.extensionValues.extension.field.keyword": {
                "case_insensitive": true,
                "value": "*test123*",
              },
            },
          },
          {
            "term": {
              "included.type": "collecting-event",
            },
          },
        ],
      },
    },
  },
}
`;
