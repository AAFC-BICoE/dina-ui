// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`QueryOperatorSelector component Snapshot Test 1`] = `
"<QueryOperatorSelector options={{...}} selectedOperator=\\"exactMatch\\" setOperator={[undefined]}>
  <div style={{...}}>
    <ForwardRef options={{...}} className=\\"flex-grow-1 me-2 ps-0\\" styles={{...}} value={{...}} onChange={[Function: onChange]}>
      <Select options={{...}} className=\\"flex-grow-1 me-2 ps-0\\" styles={{...}} inputValue=\\"\\" menuIsOpen={true} onChange={[Function (anonymous)]} onInputChange={[Function (anonymous)]} onMenuClose={[Function (anonymous)]} onMenuOpen={[Function (anonymous)]} value={{...}} aria-live=\\"polite\\" backspaceRemovesValue={true} blurInputOnSelect={true} captureMenuScroll={false} closeMenuOnSelect={true} closeMenuOnScroll={false} components={{...}} controlShouldRenderValue={true} escapeClearsValue={false} filterOption={[Function (anonymous)]} formatGroupLabel={[Function: formatGroupLabel]} getOptionLabel={[Function: getOptionLabel]} getOptionValue={[Function: getOptionValue]} isDisabled={false} isLoading={false} isMulti={false} isRtl={false} isSearchable={true} isOptionDisabled={[Function: isOptionDisabled]} loadingMessage={[Function: loadingMessage]} maxMenuHeight={300} minMenuHeight={140} menuPlacement=\\"bottom\\" menuPosition=\\"absolute\\" menuShouldBlockScroll={false} menuShouldScrollIntoView={true} noOptionsMessage={[Function: noOptionsMessage]} openMenuOnFocus={false} openMenuOnClick={true} pageSize={5} placeholder=\\"Select...\\" screenReaderStatus={[Function: screenReaderStatus]} tabIndex={0} tabSelectsValue={true}>
        <SelectContainer clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} className=\\"flex-grow-1 me-2 ps-0\\" innerProps={{...}} isDisabled={false} isFocused={false}>
          <EmotionCssPropInternal css={{...}} className=\\"flex-grow-1 me-2 ps-0\\" id={[undefined]} onKeyDown={[Function (anonymous)]} __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"SelectContainer\\">
            <div className=\\"flex-grow-1 me-2 ps-0 css-b62m3t-container\\" id={[undefined]} onKeyDown={[Function (anonymous)]}>
              <LiveRegion clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} id=\\"react-select-2-live-region\\" ariaSelection={{...}} focusedOption={{...}} focusedValue={{...}} isFocused={false} selectValue={{...}} focusableOptions={{...}}>
                <A11yText id=\\"react-select-2-live-region\\">
                  <EmotionCssPropInternal css={{...}} id=\\"react-select-2-live-region\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"span\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"A11yText\\">
                    <span id=\\"react-select-2-live-region\\" className=\\"css-1f43avz-a11yText-A11yText\\" />
                  </EmotionCssPropInternal>
                </A11yText>
                <A11yText aria-live=\\"polite\\" aria-atomic=\\"false\\" aria-relevant=\\"additions text\\">
                  <EmotionCssPropInternal css={{...}} aria-live=\\"polite\\" aria-atomic=\\"false\\" aria-relevant=\\"additions text\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"span\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"A11yText\\">
                    <span aria-live=\\"polite\\" aria-atomic=\\"false\\" aria-relevant=\\"additions text\\" className=\\"css-1f43avz-a11yText-A11yText\\" />
                  </EmotionCssPropInternal>
                </A11yText>
              </LiveRegion>
              <Control clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} innerRef={[Function (anonymous)]} innerProps={{...}} isDisabled={false} isFocused={false} menuIsOpen={true}>
                <EmotionCssPropInternal css={{...}} className=\\"\\" onMouseDown={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Control\\">
                  <div className=\\" css-1s2u09g-control\\" onMouseDown={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]}>
                    <ValueContainer clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} isDisabled={false}>
                      <EmotionCssPropInternal css={{...}} className=\\"\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"ValueContainer\\">
                        <div className=\\" css-319lph-ValueContainer\\">
                          <SingleValue clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} data={{...}} isDisabled={false}>
                            <EmotionCssPropInternal css={{...}} className=\\"\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"SingleValue\\">
                              <div className=\\" css-qc6sy-singleValue\\">
                                Exact Match
                              </div>
                            </EmotionCssPropInternal>
                          </SingleValue>
                          <Input clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} autoCapitalize=\\"none\\" autoComplete=\\"off\\" autoCorrect=\\"off\\" id=\\"react-select-2-input\\" innerRef={[Function (anonymous)]} isDisabled={false} isHidden={false} onBlur={[Function (anonymous)]} onChange={[Function (anonymous)]} onFocus={[Function (anonymous)]} spellCheck=\\"false\\" tabIndex={0} form={[undefined]} type=\\"text\\" value=\\"\\" aria-autocomplete=\\"list\\" aria-expanded={true} aria-haspopup={true} aria-controls=\\"react-select-2-listbox\\" aria-owns=\\"react-select-2-listbox\\" aria-errormessage={[undefined]} aria-invalid={[undefined]} aria-label={[undefined]} aria-labelledby={[undefined]} role=\\"combobox\\">
                            <EmotionCssPropInternal className=\\"\\" css={{...}} data-value=\\"\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Input\\">
                              <div className=\\" css-6j8wv5-Input\\" data-value=\\"\\">
                                <input className=\\"\\" style={{...}} disabled={false} autoCapitalize=\\"none\\" autoComplete=\\"off\\" autoCorrect=\\"off\\" id=\\"react-select-2-input\\" onBlur={[Function (anonymous)]} onChange={[Function (anonymous)]} onFocus={[Function (anonymous)]} spellCheck=\\"false\\" tabIndex={0} form={[undefined]} type=\\"text\\" value=\\"\\" aria-autocomplete=\\"list\\" aria-expanded={true} aria-haspopup={true} aria-controls=\\"react-select-2-listbox\\" aria-owns=\\"react-select-2-listbox\\" aria-errormessage={[undefined]} aria-invalid={[undefined]} aria-label={[undefined]} aria-labelledby={[undefined]} role=\\"combobox\\" />
                              </div>
                            </EmotionCssPropInternal>
                          </Input>
                        </div>
                      </EmotionCssPropInternal>
                    </ValueContainer>
                    <IndicatorsContainer clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} isDisabled={false}>
                      <EmotionCssPropInternal css={{...}} className=\\"\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"IndicatorsContainer\\">
                        <div className=\\" css-1hb7zxy-IndicatorsContainer\\">
                          <IndicatorSeparator clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} isDisabled={false} isFocused={false}>
                            <EmotionCssPropInternal css={{...}} className=\\"\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"span\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"IndicatorSeparator\\">
                              <span className=\\" css-1okebmr-indicatorSeparator\\" />
                            </EmotionCssPropInternal>
                          </IndicatorSeparator>
                          <DropdownIndicator clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} innerProps={{...}} isDisabled={false} isFocused={false}>
                            <EmotionCssPropInternal css={{...}} className=\\"\\" onMouseDown={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} aria-hidden=\\"true\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"DropdownIndicator\\">
                              <div className=\\" css-tlfecz-indicatorContainer\\" onMouseDown={[Function (anonymous)]} onTouchEnd={[Function (anonymous)]} aria-hidden=\\"true\\">
                                <DownChevron>
                                  <Svg size={20}>
                                    <EmotionCssPropInternal height={20} width={20} viewBox=\\"0 0 20 20\\" aria-hidden=\\"true\\" focusable=\\"false\\" css={{...}} __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"svg\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Svg\\">
                                      <svg height={20} width={20} viewBox=\\"0 0 20 20\\" aria-hidden=\\"true\\" focusable=\\"false\\" className=\\"css-tj5bde-Svg\\">
                                        <path d=\\"M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z\\" />
                                      </svg>
                                    </EmotionCssPropInternal>
                                  </Svg>
                                </DownChevron>
                              </div>
                            </EmotionCssPropInternal>
                          </DropdownIndicator>
                        </div>
                      </EmotionCssPropInternal>
                    </IndicatorsContainer>
                  </div>
                </EmotionCssPropInternal>
              </Control>
              <MenuPlacer clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} minMenuHeight={140} maxMenuHeight={300} menuPlacement=\\"bottom\\" menuPosition=\\"absolute\\" menuShouldScrollIntoView={true}>
                <Menu clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} minMenuHeight={140} maxMenuHeight={300} menuPlacement=\\"bottom\\" menuPosition=\\"absolute\\" menuShouldScrollIntoView={true} innerRef={[Function (anonymous)]} innerProps={{...}} isLoading={false} placement=\\"bottom\\">
                  <EmotionCssPropInternal css={{...}} className=\\"\\" onMouseDown={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} id=\\"react-select-2-listbox\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Menu\\">
                    <div className=\\" css-blvick-menu\\" onMouseDown={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} id=\\"react-select-2-listbox\\">
                      <ScrollManager captureEnabled={false} onTopArrive={[undefined]} onBottomArrive={[undefined]} lockEnabled={false}>
                        <MenuList clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} innerRef={[Function: innerRef]} isLoading={false} maxHeight={300} focusedOption={{...}}>
                          <EmotionCssPropInternal css={{...}} className=\\"\\" __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"MenuList\\">
                            <div className=\\" css-4ljt47-MenuList\\">
                              <Option clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} innerProps={{...}} data={{...}} isDisabled={false} isSelected={true} label=\\"Exact Match\\" type=\\"option\\" value=\\"exactMatch\\" isFocused={true} innerRef={[Function (anonymous)]}>
                                <EmotionCssPropInternal css={{...}} className=\\"\\" aria-disabled={false} id=\\"react-select-2-option-0\\" onClick={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} onMouseOver={[Function (anonymous)]} tabIndex={-1} __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Option\\">
                                  <div className=\\" css-9gakcf-option\\" aria-disabled={false} id=\\"react-select-2-option-0\\" onClick={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} onMouseOver={[Function (anonymous)]} tabIndex={-1}>
                                    Exact Match
                                  </div>
                                </EmotionCssPropInternal>
                              </Option>
                              <Option clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} innerProps={{...}} data={{...}} isDisabled={false} isSelected={false} label=\\"Partial Match\\" type=\\"option\\" value=\\"partialMatch\\" isFocused={false} innerRef={[undefined]}>
                                <EmotionCssPropInternal css={{...}} className=\\"\\" aria-disabled={false} id=\\"react-select-2-option-1\\" onClick={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} onMouseOver={[Function (anonymous)]} tabIndex={-1} __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Option\\">
                                  <div className=\\" css-yt9ioa-option\\" aria-disabled={false} id=\\"react-select-2-option-1\\" onClick={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} onMouseOver={[Function (anonymous)]} tabIndex={-1}>
                                    Partial Match
                                  </div>
                                </EmotionCssPropInternal>
                              </Option>
                              <Option clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} innerProps={{...}} data={{...}} isDisabled={false} isSelected={false} label=\\"Not Equals\\" type=\\"option\\" value=\\"notEquals\\" isFocused={false} innerRef={[undefined]}>
                                <EmotionCssPropInternal css={{...}} className=\\"\\" aria-disabled={false} id=\\"react-select-2-option-2\\" onClick={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} onMouseOver={[Function (anonymous)]} tabIndex={-1} __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Option\\">
                                  <div className=\\" css-yt9ioa-option\\" aria-disabled={false} id=\\"react-select-2-option-2\\" onClick={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} onMouseOver={[Function (anonymous)]} tabIndex={-1}>
                                    Not Equals
                                  </div>
                                </EmotionCssPropInternal>
                              </Option>
                              <Option clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} innerProps={{...}} data={{...}} isDisabled={false} isSelected={false} label=\\"Empty\\" type=\\"option\\" value=\\"empty\\" isFocused={false} innerRef={[undefined]}>
                                <EmotionCssPropInternal css={{...}} className=\\"\\" aria-disabled={false} id=\\"react-select-2-option-3\\" onClick={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} onMouseOver={[Function (anonymous)]} tabIndex={-1} __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Option\\">
                                  <div className=\\" css-yt9ioa-option\\" aria-disabled={false} id=\\"react-select-2-option-3\\" onClick={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} onMouseOver={[Function (anonymous)]} tabIndex={-1}>
                                    Empty
                                  </div>
                                </EmotionCssPropInternal>
                              </Option>
                              <Option clearValue={[Function (anonymous)]} cx={[Function (anonymous)]} getStyles={[Function (anonymous)]} getValue={[Function (anonymous)]} hasValue={true} isMulti={false} isRtl={false} options={{...}} selectOption={[Function (anonymous)]} selectProps={{...}} setValue={[Function (anonymous)]} theme={{...}} innerProps={{...}} data={{...}} isDisabled={false} isSelected={false} label=\\"Not Empty\\" type=\\"option\\" value=\\"notEmpty\\" isFocused={false} innerRef={[undefined]}>
                                <EmotionCssPropInternal css={{...}} className=\\"\\" aria-disabled={false} id=\\"react-select-2-option-4\\" onClick={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} onMouseOver={[Function (anonymous)]} tabIndex={-1} __EMOTION_TYPE_PLEASE_DO_NOT_USE__=\\"div\\" __EMOTION_LABEL_PLEASE_DO_NOT_USE__=\\"Option\\">
                                  <div className=\\" css-yt9ioa-option\\" aria-disabled={false} id=\\"react-select-2-option-4\\" onClick={[Function (anonymous)]} onMouseMove={[Function (anonymous)]} onMouseOver={[Function (anonymous)]} tabIndex={-1}>
                                    Not Empty
                                  </div>
                                </EmotionCssPropInternal>
                              </Option>
                            </div>
                          </EmotionCssPropInternal>
                        </MenuList>
                      </ScrollManager>
                    </div>
                  </EmotionCssPropInternal>
                </Menu>
              </MenuPlacer>
            </div>
          </EmotionCssPropInternal>
        </SelectContainer>
      </Select>
    </ForwardRef>
  </div>
</QueryOperatorSelector>"
`;
