import { DinaFormSection, FieldWrapperProps, LoadingSpinner } from "../..";
import { GroupSelectField } from "../../../../dina-ui/components";
import { useState } from "react";
import { ESIndexMapping } from "../types";
import { Query, Builder, Utils } from "react-awesome-query-builder";
import { useCallback } from "react";
import {
  Config,
  ImmutableTree,
  BuilderProps
} from "react-awesome-query-builder";

interface QueryBuilderProps extends FieldWrapperProps {
  /**
   * Index name being used for the Query Page.
   *
   * This is used for the auto suggestions to see what index to search against.
   */
  indexName: string;

  /**
   * Loaded from the Query Page. A list of all of the fields supported for the QueryPage index.
   */
  indexMap?: ESIndexMapping[];

  /**
   * Loaded from the Query Page since it's required for elastic search generation.
   */
  queryBuilderConfig?: Config;

  onGroupChange: (currentSubmittedValues: any) => void;
}

export function QueryBuilder({
  queryBuilderConfig,
  onGroupChange
}: QueryBuilderProps) {
  // State to store the query tree generated by the Query Builder. This tree is used to store the
  // current values, not the submitted tree.
  const [queryBuilderTree, setQueryBuilderTree] = useState<ImmutableTree>(
    defaultQueryTree()
  );

  const onChange = useCallback((immutableTree: ImmutableTree) => {
    setQueryBuilderTree(immutableTree);
  }, []);

  const renderBuilder = useCallback(
    (props: BuilderProps) => (
      <div className="query-builder-container">
        <div className="query-builder qb-lite">
          <Builder {...props} />
        </div>
      </div>
    ),
    []
  );

  // Display loading spinner when performing request for the index.
  if (!queryBuilderTree || !queryBuilderConfig) {
    return <LoadingSpinner loading={true} />;
  }

  return (
    <>
      <Query
        {...queryBuilderConfig}
        value={queryBuilderTree}
        onChange={onChange}
        renderBuilder={renderBuilder}
      />
      <DinaFormSection horizontal={"flex"}>
        <GroupSelectField
          isMulti={true}
          name="group"
          className="col-md-4 mt-3"
          onChange={(value, formik) =>
            onGroupChange({
              submittedValues: { ...formik.values, group: value }
            })
          }
        />
      </DinaFormSection>
    </>
  );
}

/**
 * Empty query tree, used as the default when loading the page.
 */
export function defaultQueryTree(): ImmutableTree {
  return Utils.loadTree({
    id: Utils.uuid(),
    type: "group",
    children1: [
      {
        type: "rule",
        properties: {
          field: null,
          operator: null,
          value: [],
          valueSrc: [],
          valueError: []
        }
      }
    ]
  });
}
