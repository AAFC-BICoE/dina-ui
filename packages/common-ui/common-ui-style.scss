/*
* CSS classes for elements that common across multiple pages and/or styled in JS files (i.e. styled after the CSS file loaded)
*/

/*
 * Changes the default color of the badge to dark grey. 
 * Currently there is no background color that is applied.
 */
.badge {
  background-color: #333333;
}

/*
* Fixes WCAG contrast issue for react-select input elements
* Not sure if why this works...perhaps padding the element renders it sufficiently for a contrast calculation.
*/
input[id^="react-select"] {
  padding: 1px !important;
}

/*
* Fixes WCAG contrast issue for placeholder text in various textfields
*/
.css-1wa3eu0-placeholder {
  color: #333333 !important;
}

.fieldset-h2-adjustment {
  font-size: 1.7rem !important;
  margin-top: 15px !important;
  margin-bottom: 10px !important;
}

.modal-header {
  justify-content: center;
}

/* Give the "Multiple Values" placeholders an italic font. */
.has-multiple-values {
  :placeholder-shown,
  .placeholder-text,
  .react-select__placeholder {
    color: rgb(87, 120, 94);
    font-style: italic;
  }
}

.associated-sample-link {
  background-color: #e9ecef;
}

/* Highlight the Edit All tab's bulk-edited fields in green. */
.has-bulk-edit-value .field-label,
.show-changed-indicators .changed-field .field-label {
  color: rgb(0, 110, 0);
}

/** Bulk-edited inputs should have a light green background and dark green border. */
.has-bulk-edit-value,
.show-changed-indicators .changed-field {
  input[type="text"]:not([readonly]):not(.react-select__input, .search-input),
  input[type="text"]:not([readonly]):focus:not(.react-select__input, .search-input),
  input[type="text"]:not(.react-select__input, .search-input):not([readonly]),
  input[type="text"]:focus:not(.react-select__input, .search-input):not([readonly]),
  input[type="search"]:not([readonly]),
  input[type="search"]:focus:not([readonly]),
  textarea,
  textarea:focus,
  .associated-sample-link,
  .react-select__control {
    border-color: green;
    background-color: rgb(175, 255, 175) !important;
  }
}

.has-bulk-edit-value input[type="checkbox"] {
  color: rgb(175, 255, 175) !important;
}

/*
 * For number inputs in chrome, the spinning shows by default.
 * (Up / Down arrows to increment the number)
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  opacity: 1;
}

/*
 * Blank Button CSS, use the light variant with this className.
 */
.btn-empty {
  background: transparent !important;
  border: transparent !important;
}

/*
 * Query Builder Custom CSS
 */
.qb-lite {
  margin: 0 !important;
}

.query-builder {
  overflow: visible !important;
}

.group-container {
  padding-right: 0 !important;
  overflow: visible;
}

.group--actions--tr {
  opacity: 1 !important
}

.rule--drag-handler {
  opacity: 1 !important;
}

.rule--header {
  position: relative;
  opacity: 1 !important;
}

.group--drag-handler {
  opacity: 1 !important;
}

.group {
  background: white !important;
  border: 1px solid #d3d7cf !important;
}

.rule--body {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.rule--field {
  flex: 0.5;
}

.rule--operator {
  flex: 0.5;
}

.rule--operator:empty {
  display: none;
}

.rule--value {
  flex: 1;
  padding-right: 5px;
}

.rule--widget, .widget--widget {
  width: 100%;
  display: inline-block !important;
}

.group--drag-handler:not(:only-child) {
  top: 19px !important;
}

.group--drag-handler {
  top: 0px !important;
}

/* 
 * Toggle Group Styles
 */
.toggleGroup {
  position: relative;
  background: white;
  border: 2px solid #dadada;
  border-radius: 10px;
  padding: 3px;
  float: left;
  top: 5px;
}

.toggleButton:last-child {
  margin-left: 5px;
}

.toggleButton {
  position: relative;
  background: none !important;
  color: #335075 !important;
  border-radius: 6px;
  border: none;
  box-shadow: none !important;
  transition: background 0.3s, color 0.3s;
}

.activeToggle {
  background: #335075 !important;
  color: white !important;
}

.hidden {
  display: none !important;
}

/*
 * React Table Styles
 */
.react-table-overflow .rt-td, .react-table-overflow .rt-tbody, .react-table-overflow .rt-table {
  overflow: visible !important;
}

.form-check-horizontal {
  display: inline;
  min-height: 1.5rem;
  margin-bottom: .125rem;
  margin-right: 1.5rem;
}

.form-check-input-horizontal {
  margin-right: 5px;
}

.disabled-radio-text {
  color: gray;
  cursor: not-allowed;
}

/*
 * Accordion Styles
 */
.accordion-button {
  font-size: 1.7rem !important;
  font-weight: 600;
  background-color: white;
}

.accordion-button:hover {
  background-color: #f8f8f8 !important;
}

.accordion-button:active {
  background-color: #ebebeb !important;
}

.accordion-button:not(.collapsed) {
  color: #333333 !important;
  background-color: white;
  font-weight: 600;
}

.accordion-header>button::after {
  // Arrow from bootstrap.
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23212529'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e") !important;
  transition: transform 0.25s;
}

.accordion-collapse {
  transition: height 0.25s;
}