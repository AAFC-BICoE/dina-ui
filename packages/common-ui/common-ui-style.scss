/*
* CSS classes for elements that common across multiple pages and/or styled in JS files (i.e. styled after the CSS file loaded)
*/

/*
 * Changes the default color of the badge to dark grey. 
 * Currently there is no background color that is applied.
 */
.badge {
  background-color: #333333;
}

/*
 * Pill shaped badges to display information.
 */
.pill {
  border-radius: 30px;
}

.pill > span, .pill > a, .pill > span {
  margin-left: 5px;
}

/*
 * To be used with the card class.
 */
.well {
  background-color: #f5f5f5;
}

.container-fluid.centered, main {
  max-width: 1400px;
  margin-left: auto;
  margin-right: auto;
}

.large-container-fluid {
  max-width: 1500px !important;
}

/*
 * Group label for the header styles.
 */
.header-group-text {
  position: relative;
  height: 38px;
  color: #525252;
  font-size: 0.65em;
  padding-top: 6px;
}

.preview-buttonbar {
  height: 3rem;
  position: sticky;
  top: -1rem;
  background: white;
  z-index: 100;
  margin-bottom: 20px; 
}

.offcanvas-end {
  width: 500px !important;
}

.no-select {
  user-select: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
}

/*
 * Breadcrumb CSS rules
 */
.breadcrumb-slash {
  --bs-breadcrumb-divider: '/';
}

.breadcrumb-arrow {
  --bs-breadcrumb-divider: '>';
}

/*
 * Column Selector CSS rules
 */
.column-selector-apply-button {
  position: sticky;
  top: -1.25em;
  left: -1.25em; 
  background: white;
  padding-top: 5px;

}

/*
* Fixes WCAG contrast issue for react-select input elements
* Not sure if why this works...perhaps padding the element renders it sufficiently for a contrast calculation.
*/
input[id^="react-select"] {
  padding: 1px !important;
}

/*
* Fixes WCAG contrast issue for placeholder text in various textfields
*/
.css-1wa3eu0-placeholder {
  color: #333333 !important;
}

.fieldset-h2-adjustment {
  font-size: 1.7rem !important;
  margin-top: 15px !important;
  margin-bottom: 10px !important;
}

.modal-header {
  justify-content: center;
}

/* Give the "Multiple Values" placeholders an italic font. */
.has-multiple-values, .is-explicitly-cleared {
  :placeholder-shown,
  .placeholder-text,
  .react-select__placeholder {
    color: rgb(87, 120, 94);
    font-style: italic;
  }
}

.associated-sample-link {
  background-color: #e9ecef;
}

/* Highlight the Edit All tab's bulk-edited fields in green. */
.has-bulk-edit-value .field-label,
.show-changed-indicators .changed-field .field-label {
  color: rgb(0, 110, 0);
}

/** Bulk-edited inputs should have a light green background and dark green border. */
.has-bulk-edit-value,
.show-changed-indicators .changed-field {
  input[type="text"]:not([readonly]):not(.react-select__input, .search-input),
  input[type="text"]:not([readonly]):focus:not(.react-select__input, .search-input),
  input[type="text"]:not(.react-select__input, .search-input):not([readonly]),
  input[type="text"]:focus:not(.react-select__input, .search-input):not([readonly]),
  input[type="search"]:not([readonly]),
  input[type="search"]:focus:not([readonly]),
  textarea,
  textarea:focus,
  .associated-sample-link,
  .react-select__control {
    border-color: green;
    background-color: rgb(175, 255, 175) !important;
  }
}

.has-bulk-edit-value input[type="checkbox"] {
  color: rgb(175, 255, 175) !important;
}

/* Highlight the Edit All tab's cleared fields in yellow. */
.is-explicitly-cleared .field-label {
  color: rgb(184, 134, 11);
}

/** Cleared inputs should have a light yellow background and yellow border. */
.is-explicitly-cleared {
  input[type="text"]:not([readonly]):not(.react-select__input, .search-input),
  input[type="text"]:not([readonly]):focus:not(.react-select__input, .search-input),
  input[type="text"]:not(.react-select__input, .search-input):not([readonly]),
  input[type="text"]:focus:not(.react-select__input, .search-input):not([readonly]),
  input[type="search"]:not([readonly]),
  input[type="search"]:focus:not([readonly]),
  textarea,
  textarea:focus,
  .associated-sample-link,
  .react-select__control {
    border-color: #fbbf24;
    background-color: rgb(255, 255, 175) !important;
  }
}

.is-explicitly-cleared input[type="checkbox"] {
  color: rgb(255, 255, 175) !important;
}

/*
 * For number inputs in chrome, the spinning shows by default.
 * (Up / Down arrows to increment the number)
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  opacity: 1;
}

/*
 * Blank Button CSS, use the light variant with this className.
 */
.btn-empty {
  background: transparent !important;
  border: transparent !important;
}

/*
 * Query Builder Custom CSS
 */
.qb-lite {
  margin: 0 !important;
}

.query-builder {
  overflow: visible !important;
}

.group-container {
  padding-right: 0 !important;
  overflow: visible;
}

.group--actions--tr {
  opacity: 1 !important
}

.rule--drag-handler {
  opacity: 1 !important;
}

.rule--header {
  position: relative;
  opacity: 1 !important;
}

.group--drag-handler {
  opacity: 1 !important;
}

.group {
  background: white !important;
  border: 1px solid #d3d7cf !important;
}

.rule--body {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.rule--field {
  flex: 1;
}

.rule--operator {
  flex: 1;
}

.rule--operator:empty {
  display: none;
  flex: 0;
}

.rule--value {
  flex: 1;
  padding-right: 5px;
}

.rule--value:empty {
  display: none;
  flex: 0;
}

.rule--widget, .widget--widget {
  width: 100%;
  display: inline-block !important;
}

.widget--widget > .react-datepicker-wrapper {
  width: 100%;
}

.group--drag-handler:not(:only-child) {
  top: 5px !important;
}

.group--drag-handler {
  top: 0px !important;
}

// Hide the query builder line if only one item is in the group (toggled by hide--line)
.group--children.hide--line > .group-or-rule-container > .group-or-rule::before {
  border-color: transparent !important;
}

.group--children {
  margin-right: 10px !important;
}

.query-builder .rule--body {
  text-align: left !important;
}

/* 
 * Toggle Group Styles
 */
.toggleGroup {
  position: relative;
  background: white;
  border: 2px solid #cccccc;
  border-radius: 10px;
  padding: 3px;
  float: left;
  top: 7px;
  margin-left: 1px;
}

.toggleButton:last-child {
  margin-left: 5px;
}

.toggleButton {
  position: relative;
  background: none !important;
  color: #335075 !important;
  border-radius: 6px;
  border: none;
  box-shadow: none !important;
  transition: background 0.3s, color 0.3s;
}

.toggleButton > span {
  position: relative;
  top: 2px;
}

.activeToggle {
  background: #335075 !important;
  color: white !important;
}

.hidden {
  display: none !important;
}

/*
 * React Table Styles
 */
.react-table-overflow .rt-td, 
.react-table-overflow .rt-tbody, 
.react-table-overflow .rt-table,
.react-table-overflow th {
  overflow: visible !important;
}

.table-top-controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.5rem;
}

.table-top-controls .pagination-top {
  flex-grow: 1;
}

.fullscreen-toggle-btn {
  background: none;
  border: 1px solid #ccc;
  border-radius: 4px;
  padding: 0.5rem;
  margin-left: 1rem;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  line-height: 1;
}

.fullscreen-toggle-btn:hover {
  background-color: #f0f0f0;
}

.ReactTable {
  transition: all 0.5s ease-in-out; 
}

.ReactTable.fullscreen-mode {
  position: fixed;
  top: 0;
  left: 0;
  padding: 0 !important;
  width: 100%;
  height: 100%;
  z-index: 1050;
  background: white;
  padding: 1rem;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
}

body:has(.offcanvas.offcanvas-end.show) .ReactTable.fullscreen-mode {
  width: calc(100% - 500px);
  transition: width .3s ease-in-out;
}

.ReactTable.fullscreen-mode .table-responsive-wrapper {
  flex-grow: 1;
  height: 0;
  max-height: none;
}

.table-responsive-wrapper {
  overflow-x: auto;
  overflow-y: auto;
  width: 100%;
  max-height: 75vh;
}

.ReactTable thead {
  position: sticky;
  top: 0;
  z-index: 100;
}

.ReactTable thead th {
  background: white;
  white-space: nowrap;
  padding-left: 15px !important;
  padding-right: 15px !important;
}

.form-check-horizontal {
  display: inline;
  min-height: 1.5rem;
  margin-bottom: .125rem;
  margin-right: 1.5rem;
}

.form-check-input-horizontal {
  margin-right: 5px;
}

.disabled-radio-text {
  color: gray;
  cursor: not-allowed;
}

.query-page-loading-spinner {
  position: relative;
  margin-top: 10px;
  margin-bottom: 10px;
  width: 100%;
  min-height: 50vh;
  border-radius: 3px;
  background-color: #ffffff;
  animation: pulse-animation 1.5s infinite ease-in-out;
}

.query-page-loading-spinner.fullscreen {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1050;
}

@keyframes pulse-animation {
  0% {
    background-color: #ffffff;
  }
  50% {
    background-color: #eeeeee;
  }
  100% {
    background-color: #ffffff;
  }
}


/*
 * Accordion Styles
 */
.accordion-header {
  background-color: #c5c5c5;
  margin-top: 0;
}
.accordion-button {
  font-size: 1.7rem !important;
  font-weight: 600;
  background-color: white;
}

.accordion-button:hover {
  background-color: #f8f8f8 !important;
}

.accordion-button:active {
  background-color: #ebebeb !important;
}

.accordion-button:not(.collapsed) {
  color: #333333 !important;
  background-color: white;
  font-weight: 600;
}

.accordion-header>button::after {
  // Arrow from bootstrap.
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='%23212529'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e") !important;
  transition: transform 0.25s;
}

.accordion-collapse {
  transition: height 0.25s;
}

/**
 * Dropdown Icons
 */
.dropdown-icon {
  width: 1.5em !important;
  height: 1.5em !important;
}

.react-pdf__Page__canvas {
  max-width: 100%;
  height: auto !important;
}

.react-pdf__Page {
  display: flex;
  justify-content: center;
  align-items: center;
}

