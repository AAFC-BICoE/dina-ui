// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MaterialSampleSplitGenerationForm Layout snapshot with matching material sample types. 1`] = `""`;

exports[`MaterialSampleSplitGenerationForm Layout snapshot without matching material sample types. 1`] = `
"<MockAppContextProvider apiContext={{...}}>
  <SWRConfig$1 value={{...}}>
    <IntlProvider>
      <IntlProvider locale=\\"en\\" messages={{...}} formats={{...}} timeZone={[undefined]} defaultLocale=\\"en\\" defaultFormats={{...}} fallbackOnEmptyString={true} onError={[Function: defaultErrorHandler]} onWarn={[Function: defaultWarnHandler]} textComponent={[symbol]}>
        <FileUploadProviderImpl>
          <Memo(DndProvider) backend={[Function: createBackend]}>
            <div>
              <ModalProvider appElement={{...}}>
                <MaterialSampleSplitGenerationForm onGenerate={[Function: mockConstructor] { _isMockFunction: true, getMockImplementation: [Function (anonymous)], mock: Object [Object: null prototype] { calls: [], instances: [], invocationCallOrder: [], results: [] }, mockClear: [Function (anonymous)], mockReset: [Function (anonymous)], mockRestore: [Function (anonymous)], mockReturnValueOnce: [Function (anonymous)], mockResolvedValueOnce: [Function (anonymous)], mockRejectedValueOnce: [Function (anonymous)], mockReturnValue: [Function (anonymous)], mockResolvedValue: [Function (anonymous)], mockRejectedValue: [Function (anonymous)], mockImplementationOnce: [Function (anonymous)], mockImplementation: [Function (anonymous)], mockReturnThis: [Function (anonymous)], mockName: [Function (anonymous)], getMockName: [Function (anonymous)] }} ids={{...}} splitConfiguration={{...}} splitConfigurationID=\\"706eece4-3105-4e96-bc2f-7530a80a6163\\">
                  <LoadingSpinner loading={true}>
                    <div className=\\"spinner-border\\" role=\\"status\\">
                      <span className=\\"visually-hidden mb-3\\">
                        Loading...
                      </span>
                    </div>
                  </LoadingSpinner>
                </MaterialSampleSplitGenerationForm>
                <Modal appElement={[undefined]} ariaHideApp={false} isOpen={false} className=\\"Modal__Bootstrap modal-dialog\\" style={{...}} contentLabel=\\"Popup dialog window\\" portalClassName=\\"ReactModalPortal\\" bodyOpenClassName=\\"ReactModal__Body--open\\" role=\\"dialog\\" closeTimeoutMS={0} shouldFocusAfterRender={true} shouldCloseOnEsc={true} shouldCloseOnOverlayClick={true} shouldReturnFocusAfterClose={true} preventScroll={false} parentSelector={[Function: parentSelector]} overlayElement={[Function: overlayElement]} contentElement={[Function: contentElement]}>
                  <Portal containerInfo={{...}}>
                    <ModalPortal defaultStyles={{...}} appElement={[undefined]} ariaHideApp={false} isOpen={false} className=\\"Modal__Bootstrap modal-dialog\\" style={{...}} contentLabel=\\"Popup dialog window\\" portalClassName=\\"ReactModalPortal\\" bodyOpenClassName=\\"ReactModal__Body--open\\" role=\\"dialog\\" closeTimeoutMS={0} shouldFocusAfterRender={true} shouldCloseOnEsc={true} shouldCloseOnOverlayClick={true} shouldReturnFocusAfterClose={true} preventScroll={false} parentSelector={[Function: parentSelector]} overlayElement={[Function: overlayElement]} contentElement={[Function: contentElement]} />
                  </Portal>
                </Modal>
              </ModalProvider>
            </div>
          </Memo(DndProvider)>
        </FileUploadProviderImpl>
      </IntlProvider>
    </IntlProvider>
  </SWRConfig$1>
</MockAppContextProvider>"
`;
