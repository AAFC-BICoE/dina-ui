# Common base Compose file for dev/test/prod environments:
version: "3.7"
networks:
  default:
    ipam:
      config:
        - subnet: ${SUBNET}
services:
  database:
    image: postgis/postgis:12-3.1-alpine
    environment:
      POSTGRES_DB: dina
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: p
    volumes:
      - ./initdb.sql:/docker-entrypoint-initdb.d/1-initdb.sql
      - "$HOME/dina_pg_data:/var/lib/postgresql/data"
    ports:
      - "5432:5432"
  minio:
    image: minio/minio
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: minio123
    labels:
      - "traefik.http.routers.minio.rule=Host(`${MINIO_DOMAIN}`)"
    command: server /data
  keycloak:
    image: jboss/keycloak:13.0.1
    user: root
    command: ["-Djboss.http.port=80"]
    expose: [80]
    environment:
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_IMPORT: /keycloak-realm.json
      DB_VENDOR: POSTGRES
      DB_ADDR: database
      DB_DATABASE: dina
      DB_USER: postgres
      DB_PASSWORD: p
      DB_SCHEMA: keycloak
    volumes:
      - "../keycloak-dina-starter-realm.json:/keycloak-realm.json"
    labels:
      - "traefik.http.routers.keycloak.rule=Host(`${KEYCLOAK_DOMAIN}`)"
    networks:
      default:
        # Here we set the IP for Keycloak
        ipv4_address: ${KEYCLOAK_IP}
  dina-ui:
    environment:
      AGENT_API_ADDRESS: agent-api:8080
      OBJECTSTORE_API_ADDRESS: objectstore-api:8080
      USER_API_ADDRESS: user-api:8080
      COLLECTION_API_ADDRESS: collection-api:8080
      SEQDB_API_ADDRESS: seqdb-api:8080
      SEARCH_API_ADDRESS: search-ws:8085
      KEYCLOAK_CLIENTID: dina
      KEYCLOAK_REALM: dina
      KEYCLOAK_PUBLIC_URL: http://${KEYCLOAK_DOMAIN}/auth
    labels:
      - "traefik.http.routers.dina-ui.rule=Host(`${DINAUI_DOMAIN}`)"
      - "traefik.http.services.dina-ui.loadbalancer.server.port=8080"
  objectstore-api:
    environment:
      SPRING_APPLICATION_JSON: >
        {
          "spring.datasource.url": "jdbc:postgresql://database/dina?currentSchema=object_store",
          "spring.datasource.username": "postgres",
          "spring.datasource.password": "p",
          "spring.datasource.continue-on-error": "true",
          "spring.liquibase.user": "postgres",
          "spring.liquibase.password": "p",
          "spring.servlet.multipart.max-file-size": "2GB",
          "spring.servlet.multipart.max-request-size": "2GB",
          "minio.host": "minio",
          "minio.port": "9000",
          "minio.accessKey": "minio",
          "minio.secretKey": "minio123",
          "keycloak.enabled": "true",
          "keycloak.resource": "dina",
          "keycloak.auth-server-url": "http://${KEYCLOAK_DOMAIN}/auth",
          "rabbitmq.host": "rabbitmq",
          "messaging.isProducer": "true"
        }
    extra_hosts:
      # Resolve the Keycloak domain to Keycloak's static IP:
      - "${KEYCLOAK_DOMAIN}:${KEYCLOAK_IP}"
  seqdb-api:
    environment:
      SPRING_APPLICATION_JSON: >
        {
          "spring.datasource.url": "jdbc:postgresql://database/dina?currentSchema=seqdb",
          "spring.datasource.username": "postgres",
          "spring.datasource.password": "p",
          "spring.datasource.continue-on-error": "true",
          "spring.liquibase.user": "postgres",
          "spring.liquibase.password": "p",
          "keycloak.enabled": "true",
          "keycloak.resource": "dina",
          "keycloak.auth-server-url": "http://${KEYCLOAK_DOMAIN}/auth"
        }
    extra_hosts:
      # Resolve the Keycloak domain to Keycloak's static IP:
      - "${KEYCLOAK_DOMAIN}:${KEYCLOAK_IP}"
  agent-api:
    environment:
      SPRING_APPLICATION_JSON: >
        {
          "spring.datasource.url": "jdbc:postgresql://database/dina?currentSchema=agent",
          "spring.datasource.username": "postgres",
          "spring.datasource.password": "p",
          "spring.datasource.continue-on-error": "true",
          "spring.liquibase.user": "postgres",
          "spring.liquibase.password": "p",
          "keycloak.enabled": "true",
          "keycloak.resource": "dina",
          "keycloak.auth-server-url": "http://${KEYCLOAK_DOMAIN}/auth",
          "rabbitmq.host": "rabbitmq",
          "messaging.isProducer": "true"
        }
    extra_hosts:
      # Resolve the Keycloak domain to Keycloak's static IP:
      - "${KEYCLOAK_DOMAIN}:${KEYCLOAK_IP}"
  collection-api:
    environment:
      SPRING_APPLICATION_JSON: >
        {
          "spring.datasource.url": "jdbc:postgresql://database/dina?currentSchema=collection",
          "spring.datasource.username": "postgres",
          "spring.datasource.password": "p",
          "spring.datasource.continue-on-error": "true",
          "spring.liquibase.user": "postgres",
          "spring.liquibase.password": "p",
          "keycloak.enabled": "true",
          "keycloak.resource": "dina",
          "keycloak.auth-server-url": "http://${KEYCLOAK_DOMAIN}/auth",
          "rabbitmq.host": "rabbitmq",
          "messaging.isProducer": "true"
        }
    extra_hosts:
      # Resolve the Keycloak domain to Keycloak's static IP:
      - "${KEYCLOAK_DOMAIN}:${KEYCLOAK_IP}"
  user-api:
    environment:
      SPRING_APPLICATION_JSON: >
        {
          "spring.datasource.url": "jdbc:postgresql://database/dina?currentSchema=userapi",
          "spring.datasource.username": "postgres",
          "spring.datasource.password": "p",
          "spring.datasource.continue-on-error": "true",
          "spring.liquibase.user": "postgres",
          "spring.liquibase.password": "p",
          "spring.liquibase.liquibase-schema": "userapi",
          "keycloak.enabled": "true",
          "keycloak.resource": "user-svc",
          "keycloak.credentials.secret": "120c0b7a-5ed2-4295-9a31-29c2fcbc714f",
          "keycloak.auth-server-url": "http://${KEYCLOAK_DOMAIN}/auth"
        }
    extra_hosts:
      # Resolve the Keycloak domain to Keycloak's static IP:
      - "${KEYCLOAK_DOMAIN}:${KEYCLOAK_IP}"
  traefik:
    image: traefik:v2.2.0
    command: --providers.docker=true
    ports:
      - "80:80" # Traefik-connected services
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - rabbitmq-data:/var/lib/rabbitmq/

volumes:
  rabbitmq-data:
    driver: local
