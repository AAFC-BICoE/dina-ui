# Additional launch configuration for local dev instances.
version: "3.7"
services:
  objectstore-api:
    image: maven:3.6.3-jdk-11
    # Run as Docker host user so generated files don't belong to root:
    user: $UID:$GID
    volumes:
      - "../repos/objectstore-api:/app"
      # Share host users:
      - "/etc/group:/etc/group:ro"
      - "/etc/passwd:/etc/passwd:ro"
      - "/etc/shadow:/etc/shadow:ro"
      # Use the host maven repository:
      - "~/.m2:/var/maven/.m2"
    ports:
      - "5005:5005" # debug port
    # The maven container ignores the docker-compose "environment" field, so pass in variables in the command:
    working_dir: /app
    command: >
      bash -c "
      mvn
      -Duser.home=/var/maven
      -Dspring-boot-maven-plugin.fork=true
      -Dspring-boot.run.jvmArguments=\"
        -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005
      \"
      spring-boot:run
      "
  seqdb-api:
    image: maven:3.6.3-jdk-11
    # Run as Docker host user so generated files don't belong to root:
    user: $UID:$GID
    volumes:
      - "../repos/seqdb-api:/app"
      # Share host users:
      - "/etc/group:/etc/group:ro"
      - "/etc/passwd:/etc/passwd:ro"
      - "/etc/shadow:/etc/shadow:ro"
      # Use the host maven repository:
      - "~/.m2:/var/maven/.m2"
    ports:
      - "5008:5005" # debug port
    working_dir: /app
    # The maven container ignores the docker-compose "environment" field, so pass in variables in the command:
    command: >
      bash -c "
      mvn
      -Duser.home=/var/maven
      -Dspring-boot-maven-plugin.fork=true
      -Dspring-boot.run.jvmArguments=\"
        -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005
      \"
      spring-boot:run
      "
  agent-api:
    image: maven:3.6.3-jdk-11
    # Run as Docker host user so generated files don't belong to root:
    user: $UID:$GID
    volumes:
      - "../repos/agent-api:/app"
      # Share host users:
      - "/etc/group:/etc/group:ro"
      - "/etc/passwd:/etc/passwd:ro"
      - "/etc/shadow:/etc/shadow:ro"
      # Use the host maven repository:
      - "~/.m2:/var/maven/.m2"
    ports:
      - "5006:5005" # debug port
    working_dir: /app
    # The maven container ignores the docker-compose "environment" field, so pass in variables in the command:
    command: >
      bash -c "
      mvn
      -Duser.home=/var/maven
      -Dspring-boot-maven-plugin.fork=true
      -Dspring-boot.run.jvmArguments=\"
        -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005
      \"
      spring-boot:run
      "
  user-api:
    image: maven:3.6.3-jdk-11
    # Run as Docker host user so generated files don't belong to root:
    user: $UID:$GID
    volumes:
      - "../repos/dina-user-api:/app"
      # Share host users:
      - "/etc/group:/etc/group:ro"
      - "/etc/passwd:/etc/passwd:ro"
      - "/etc/shadow:/etc/shadow:ro"
      # Use the host maven repository:
      - "~/.m2:/var/maven/.m2"
    ports:
      - "5007:5005" # debug port
    working_dir: /app
    # The maven container ignores the docker-compose "environment" field, so pass in variables in the command:
    command: >
      bash -c "
      mvn
      -Duser.home=/var/maven
      -Dspring-boot-maven-plugin.fork=true
      -Dspring-boot.run.jvmArguments=\"
        -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005
      \"
      spring-boot:run
      "
  collection-api:
    image: maven:3.6.3-jdk-11
    # Run as Docker host user so generated files don't belong to root:
    user: $UID:$GID
    volumes:
      - "../repos/collection-api:/app"
      # Share host users:
      - "/etc/group:/etc/group:ro"
      - "/etc/passwd:/etc/passwd:ro"
      - "/etc/shadow:/etc/shadow:ro"
      # Use the host maven repository:
      - "~/.m2:/var/maven/.m2"
    ports:
      - "5009:5005" # debug port
    working_dir: /app
    # The maven container ignores the docker-compose "environment" field, so pass in variables in the command:
    command: >
      bash -c "
      mvn
      -Duser.home=/var/maven
      -Dspring-boot-maven-plugin.fork=true
      -Dspring-boot.run.jvmArguments=\"
        -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005
      \"
      spring-boot:run
      "
  loan-transaction-api:
    image: maven:3.6.3-jdk-11
    # Run as Docker host user so generated files don't belong to root:
    user: $UID:$GID
    volumes:
      - "../repos/loan-transaction-api:/app"
      # Share host users:
      - "/etc/group:/etc/group:ro"
      - "/etc/passwd:/etc/passwd:ro"
      - "/etc/shadow:/etc/shadow:ro"
      # Use the host maven repository:
      - "~/.m2:/var/maven/.m2"
    ports:
      - "5011:5005" # debug port
    working_dir: /app
    # The maven container ignores the docker-compose "environment" field, so pass in variables in the command:
    command: >
      bash -c "
      mvn
      -Duser.home=/var/maven
      -Dspring-boot-maven-plugin.fork=true
      -Dspring-boot.run.jvmArguments=\"
        -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=*:5005
      \"
      spring-boot:run
      "
  # Nextjs's dev-mode server that hot-reloads the UI source code:
  dina-ui-dev-server:
    image: node:14.18.1
    volumes:
      - "../repos/dina-ui:/dina-ui"
      # Share host home directory for yarn cache:
      - /home/${USER}:/home/${USER}
      # Share host users:
      - /etc/group:/etc/group:ro
      - /etc/passwd:/etc/passwd:ro
      - /etc/shadow:/etc/shadow:ro
    # Run as Docker host user so generated files don't belong to root:
    user: $UID:$GID
    stop_signal: SIGKILL
    command: >
      bash -c "
      yarn --cwd=/dina-ui/packages/dina-ui ;
      yarn --cwd=/dina-ui/packages/dina-ui dev
      "
  # Front-end gateway that proxies URLs to the correct service:
  dina-ui:
    image: caddy/caddy:2.3.0-alpine
    volumes:
      - "../repos/dina-ui/packages/dina-ui/dev.Caddyfile:/etc/caddy/Caddyfile"
    environment:
      UI_DEV_SERVER_ADDRESS: dina-ui-dev-server:3000
